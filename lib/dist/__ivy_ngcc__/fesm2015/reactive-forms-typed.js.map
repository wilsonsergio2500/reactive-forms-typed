{"version":3,"file":"reactive-forms-typed.js","sources":["../../src/directives/form-control-onerror.directive.ts","../../src/FormTypeBuilder.extensions.ts","../../src/FormTypeBuilder.service.ts","../../src/ReactiveFormsTyped.Module.ts","../../reactive-forms-typed.ts"],"names":["NgFormBuilder"],"mappings":";;;;;;;;MAQa,+BAA+B;AAAI,IAU9C,YACwC,gBAAoC,EAClE,OAAgC;AACzC,QAFuC,qBAAgB,GAAhB,gBAAgB,CAAoB;AAAE,QACpE,YAAO,GAAP,OAAO,CAAyB;AAC5C,QAVW,WAAM,GAAQ,IAAI,CAAC;AAC9B,QAAW,sBAAiB,GAAY,KAAK,CAAC;AAC9C,QAGE,WAAM,GAAY,IAAI,CAAC;AACzB,QAOU,YAAO,GAAQ;AACzB,YAAI,QAAQ,EAAE,UAAU;AACxB,YAAI,SAAS,EAAE,0BAA0B;AACzC,YAAI,SAAS,EAAE,4BAA4B;AAC3C,YAAI,mBAAmB,EAAE,uBAAuB;AAChD,YAAI,gBAAgB,EAAE,mBAAmB;AACzC,YAAI,oBAAoB,EAAE,mBAAmB;AAC7C,YAAI,eAAe,EAAE,uBAAuB;AAC5C,YAAI,SAAS,EAAE,mCAAmC;AAClD,YAAI,gBAAgB,EAAE,uBAAuB;AAC7C,YAAI,oBAAoB,EAAE,qBAAqB;AAC/C,YAAI,KAAK,EAAE,uBAAuB;AAClC,SAAG,CAAC;AACJ,KAfG;AACH,IAeE,QAAQ;AAAM,QACZ,MAAM,MAAM,GAAQ,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;AACnD,QACI,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE;AACvB,YAAM,IAAI,CAAC,OAAO,mCAAQ,IAAI,CAAC,OAAO,GAAK,IAAI,CAAC,MAAM,CAAE,CAAC;AACzD,SAAK;AACL,QAAI,IAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE;AAC3B,YAAM,IAAI,CAAC,OAAO,mCAAQ,IAAI,CAAC,OAAO,GAAK,MAAM,CAAC,QAAQ,CAAE,CAAC;AAC7D,SAAK;AACL,QAAI,IAAI,CAAC,CAAC,MAAM,CAAC,gBAAgB,IAAI,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE;AACtF,YAAM,IAAI,CAAC,OAAO,mCAAQ,IAAI,CAAC,OAAO,GAAK,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAE,CAAC;AAC3F,SAAK;AACL,QACI,IAAI,CAAC,aAAa,EAAE,CAAC;AACzB,KAAG;AACH,IACE,aAAa;AACf,QACI,MAAM,QAAQ,GAAG,CAAC,CAAU;AAChC,YAAM,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACvB,YAAM,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC;AACvD,YAAM,IAAI,CAAC,CAAC,GAAG,EAAE;AACjB,gBAAQ,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,SAAS,GAAG,GAAG,CAAC;AACnD,aAAO;AACP,SAAK,CAAA;AACL,QACI,IAAI,CAAC,OAAO,GAAI,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;AAChH,KAAG;AACH,IAAE,IAAI,YAAY;AAClB,QACI,MAAM,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;AAC7E,QAAI,IAAI,CAAC,CAAC,WAAW,IAAI,CAAC,CAAC,WAAW,CAAC,MAAM,EAAE;AAC/C,YAAM,MAAM,MAAM,GAAQ,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;AACrD,YACM,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;AACnD,YAAM,QAAQ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;AAC7C,SAAK;AACL,QAAI,OAAO,IAAI,CAAC;AAChB,KAAG;AACH,IACE,IAAI,cAAc;AACpB,QAAI,MAAM,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;AAC7E,QAAI,IAAI,IAAI,CAAC,iBAAiB,EAAE;AAChC,YAAM,IAAI,WAAW,EAAE;AACvB,gBAAQ,OAAO,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC;AAC1C,aAAO;AACP,SAAK;AAAE,aAAI;AACX,YAAM,IAAI,WAAW,EAAE;AACvB,gBAAQ,OAAO,WAAW,CAAC,OAAO,IAAI,IAAI,CAAC,gBAAgB,CAAC,SAAS,KAAK,CAAC,CAAE,WAAW,CAAC,MAAc,CAAC,WAAW,CAAC,CAAC;AACrH,aAAO;AACP,SAAK;AACL,QAAI,OAAO,IAAI,CAAC;AAChB,KAAG;AACH,IACE,WAAW;AACb,QAAI,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;AAC/B,KAAG;AACH;6DA1FC,SAAS,SAAC,mBACT,QAAQ,EAAE,0BAA0B,gBACrC;;;iJACI;AAAE;AAA0D,YAPxD,kBAAkB,uBAkBpB,MAAM,SAAC,kBAAkB;AAAU,YAnBP,UAAU;AAAI;AAAI;AAAoD,8BAUtG,KAAK,SAAC,wBAAwB;AAAQ,qBACtC,KAAK;AAAM,gCACX,KAAK;AAAM,qBAGX,WAAW,SAAC,QAAQ;AACnB;;;;;;;;;;;;;;;;;;;oBAAE;AAAC;ACNP;AACA,MAAa,mBAAmB;AAChC;AACkB,0BAAM,GAAG;AAC3B,IAAQ,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;AACjC,IAAQ,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;AAC9B,CAAC,CAAA;AAEa,6BAAS,GAAG,UAAU,MAAW;AACnD,IAAQ,IAAI,CAAC,QAAQ,qBAAQ,MAAM,CAAE,CAAC;AAClC,CAAC,CAAA;AAEa,iCAAa,GAAG,UAAU,MAAW;AACvD,IAAQ,IAAI,CAAC,gBAAgB,qBAAQ,MAAM,CAAE,CAAC;AAC1C,CAAC,CAAC;AAEY,wCAAoB,GAAG,UAAU,GAAW,EAAE,MAAW;AAC3E,IAAQ,IAAI,CAAC,CAAC,IAAI,CAAC,gBAAgB,EAAE;AACrC,QAAY,IAAI,CAAC,gBAAgB,qBAAQ,IAAI,CAAC,gBAAgB,CAAE,CAAC;AACjE,QAAY,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;AAChD,KAAS;AAAE,SAAI;AACf,QAAY,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;AACvC,QAAY,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;AAChD,KAAS;AACL,CAAC,CAAA;AAEa,mCAAe,GAAG;AACpC,IAAQ,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;AAC5B,CAAC,CAAA;AAEa,+BAAW,GAAG;AAChC,IAAQ,OAAO,IAAI,CAAC,WAAW,CAAA;AAC3B,CAAC,CAAA;AAEa,iDAA6B,GAAG,UAAS,IAAY,EAAE,EAAU;AAClF,IAAK,MAAM,IAAI,GAAG,IAA4B,CAAC;AAChD,IAAQ,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,YAAY,CAAC,IAAI,CAC9C,KAAK,CAAC,CAAC,CAAC,EACR,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,sBAAsB,EAAE,CAAC,CACvD,CAAA;AACT,IAAQ,IAAI,CAAC,eAAe,GAAG,CAAC,GAAG,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;AACvE,CAAC,CAAA;AAEa,8CAA0B,GAAG;AAC7C,IAAM,IAAG,IAAI,CAAC,eAAe,EAAC;AAChC,QAAa,IAAI,CAAC,eAAkC,CAAC,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;AACvF,KAAS;AACL,CAAC;AACL;AAAC,MC9CY,eAAe;AAC5B,IAMI;AACJ,QAAQ,IAAI,CAAC,aAAa,GAAG,IAAIA,WAAa,EAAE,CAAC;AACjD,KAAK;AACL,IAPI,OAAO,MAAM;AACjB,QAAQ,OAAO,IAAI,eAAe,EAAE,CAAC;AACrC,KAAK;AACL,IAKI,KAAK,CAAI,cAAwC,EAAE,OAAuC;AAAK,QAC3F,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,cAAc,EAAE,OAAO,CAAuB,CAAC;AAClG,QAAQ,SAAS,CAAC,MAAM,GAAG,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACtE,QAAQ,SAAS,CAAC,aAAa,GAAG,mBAAmB,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACpF,QAAQ,SAAS,CAAC,aAAa,GAAG,mBAAmB,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACpF,QAAQ,SAAS,CAAC,oBAAoB,GAAG,mBAAmB,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAClG,QAAQ,SAAS,CAAC,eAAe,GAAG,mBAAmB,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACxF,QAAQ,SAAS,CAAC,WAAW,GAAG,mBAAmB,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAChF,QAAQ,SAAS,CAAC,6BAA6B,GAAG,mBAAmB,CAAC,6BAA6B,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACpH,QAAQ,SAAS,CAAC,MAAM,EAAE,CAAC;AAC3B,QAAQ,OAAO,SAAS,CAAC;AACzB,KAAK;AACL,IAEI,OAAO,CAAC,SAAiB,EAAE,SAA8C,EAAE,cAA6D;AAC5I,QAAQ,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,SAAS,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC;AAChF,KAAK;AACL,IAGI,KAAK,CAAC,cAAqB,EAAE,SAA8B,EAAE,cAAwC;AACzG,QAAQ,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,cAAc,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC;AACnF,KAAK;AACL;6CAnCC,UAAU;6GACT;AAAE;;;gDAEQ;AAAC;AAAC,MCQD,kBAAkB;AAAI;gDAdlC,QAAQ,SAAC,mBACR,OAAO,EAAE;MACP,YAAY,uBACZ,WAAW,uBACX;aAAmB,mBACpB,mBACD,YAAY,EAAE,uBACV;yBAA+B;kBAClC;YACD,OAAO,EAAE;YACL;4BAA+B,mBAClC,mBACA,SAAS,EAAE,CAAC,eAAe,CAAC,gBAC9B;;;;;;;;;;;;;;;;;;;0BACI;AAAC;ACtBN;AACC;AACC;AAED;AAAC;AACmD","sourcesContent":["import { Directive, Inject, Input, ElementRef, OnInit, HostBinding, AfterContentInit, OnDestroy } from '@angular/core';\r\nimport { FormGroupDirective } from '@angular/forms';\r\nimport { Subscription, Observable, interval, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Directive({\r\n  selector: '[formControlOnErrorItem]',\r\n})\r\nexport class FormControlOnErrorItemDirective implements OnInit, OnDestroy {\r\n\r\n  @Input('formControlOnErrorItem') formControlItem: string;\r\n  @Input() errors: any = null;\r\n  @Input() showOnFormTouched: boolean = false;\r\n  tracker: Subscription;\r\n\r\n  @HostBinding('hidden')\r\n  hidden: boolean = true;\r\n\r\n  constructor(\r\n      @Inject(FormGroupDirective) private formGroupService: FormGroupDirective, \r\n    private element: ElementRef<HTMLElement>\r\n    ) {\r\n  }\r\n\r\n  private _errors: any = {\r\n    required: \"Required\",\r\n    minlength: \"Minimum length not valid\",\r\n    maxlength: \"Exceeds the maximum length\",\r\n    isValidEmailAddress: \"Invalid email address\",\r\n    isValidSelection: \"Invalid selection\",\r\n    isStringValidByRegEx: \"Invalid character\",\r\n    isStringInRange: \"Invalid string length\",\r\n    isInRange: \"Number is outside specified range\",\r\n    isGreaterThanMin: \"Exceeds allowed value\",\r\n    doControlValuesMatch: \"Values do not match\",\r\n    email: \"Invalid email address\"\r\n  };\r\n\r\n  ngOnInit(): void {\r\n    const fgroup: any = this.formGroupService.form;\r\n\r\n    if (!!this.errors) {\r\n      this._errors = { ...this._errors, ...this.errors };\r\n    }\r\n    if (!!fgroup.__errors) {\r\n      this._errors = { ...this._errors, ...fgroup.__errors };\r\n    }\r\n    if (!!fgroup.__contractErrors && !!fgroup.__contractErrors[this.formControlItem]) {\r\n      this._errors = { ...this._errors, ...fgroup.__contractErrors[this.formControlItem] };\r\n    }\r\n\r\n    this.changeTracker();\r\n  }\r\n\r\n  changeTracker() {\r\n\r\n    const onHappen = (x: boolean) => {\r\n      this.hidden = !x;\r\n      const msg = this.hidden ? '' : this.errorMessage;\r\n      if (!!msg) {\r\n        this.element.nativeElement.innerText = msg;\r\n      }\r\n    }\r\n\r\n    this.tracker =  interval(250).pipe(map(ev => this.errorMessage && this.ControlTouched)).subscribe(onHappen);\r\n  }\r\n  get errorMessage() {\r\n\r\n    const formControl = this.formGroupService.form.get(this.formControlItem);\r\n    if (!!formControl && !!formControl.errors) {\r\n      const fgroup: any = this.formGroupService.form;\r\n\r\n      const keys = Object.keys(formControl.errors);\r\n      return (this._errors[keys[0]] || null);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  get ControlTouched() {\r\n    const formControl = this.formGroupService.form.get(this.formControlItem);\r\n    if (this.showOnFormTouched) {\r\n      if (formControl) {\r\n        return formControl.parent.touched;\r\n      }\r\n    } else {\r\n      if (formControl) {\r\n        return formControl.touched || this.formGroupService.submitted || (!!(formControl.parent as any).__submitted);\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.tracker.unsubscribe();\r\n  }\r\n}","import { Subscription } from \"rxjs\";\r\nimport { delay, tap } from \"rxjs/operators\";\r\nimport { NgTypeFormGroup } from \"./FormTypeBuilder.models\";\r\n\r\nexport interface IFormGroupPrivates{\r\n    __submitted : boolean;\r\n    __errors: any;\r\n    __contractErrors: any;\r\n    __subscriptions: Subscription[]\r\n}\r\n// @dynamic\r\nexport class FormExtendedMethods {\r\n\r\n    public static onInit = function () {\r\n        this.__submitted = false;\r\n        this.__subscriptions = [];\r\n    }\r\n\r\n    public static setErrors = function (config: any) {\r\n        this.__errors = { ...config };\r\n    }\r\n\r\n    public static setFormErrors = function (config: any) {\r\n        this.__contractErrors = { ...config };\r\n    };\r\n\r\n    public static setFormControlErrors = function (key: string, config: any) {\r\n        if (!!this.__contractErrors) {\r\n            this.__contractErrors = { ...this.__contractErrors };\r\n            this.__contractErrors[key] = config;\r\n        } else {\r\n            this.__contractErrors = {};\r\n            this.__contractErrors[key] = config;\r\n        }\r\n    }\r\n\r\n    public static markAsSubmitted = function () {\r\n        this.__submitted = true;\r\n    }\r\n\r\n    public static isSubmitted = function () {\r\n        return this.__submitted\r\n    }\r\n\r\n    public static addFormControlValidityTracker = function(from: string, to: string){\r\n      const form = this as NgTypeFormGroup<any>;\r\n        const sub$ = form.controls[from].valueChanges.pipe(\r\n            delay(1),\r\n            tap(_ => form.controls[to].updateValueAndValidity())\r\n        )\r\n        this.__subscriptions = [...this.__subscriptions, sub$.subscribe()];\r\n    }\r\n\r\n    public static unsubscribeValidityTackers = function(){\r\n        if(this.__subscriptions){\r\n            (this.__subscriptions as Subscription[]).forEach(sub => sub.unsubscribe());\r\n        }\r\n    }\r\n\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport {\r\n    FormBuilder as NgFormBuilder,\r\n    ValidatorFn,\r\n    AsyncValidatorFn,\r\n    AbstractControlOptions,\r\n} from \"@angular/forms\";\r\nimport { NgTypeAbstractControl, NgTypeFormControl, NgTypeFormGroup, NgTypeFormArray } from \"./FormTypeBuilder.models\";\r\nimport { FormExtendedMethods } from \"./FormTypeBuilder.extensions\";\r\n\r\n\r\n@Injectable()\r\nexport class FormTypeBuilder {\r\n\r\n    private ngFormBuilder: NgFormBuilder;\r\n    static create() {\r\n        return new FormTypeBuilder();\r\n    }\r\n\r\n    constructor() {\r\n        this.ngFormBuilder = new NgFormBuilder();\r\n    }\r\n    \r\n    group<T>(controlsConfig: { [P in keyof T] : any }, options?: AbstractControlOptions | null): NgTypeFormGroup<T> {\r\n        const formGroup = this.ngFormBuilder.group(controlsConfig, options) as NgTypeFormGroup<T>;\r\n        formGroup.onInit = FormExtendedMethods.onInit.bind(formGroup);\r\n        formGroup.setFormErrors = FormExtendedMethods.setFormErrors.bind(formGroup);\r\n        formGroup.setFormErrors = FormExtendedMethods.setFormErrors.bind(formGroup);\r\n        formGroup.setFormControlErrors = FormExtendedMethods.setFormControlErrors.bind(formGroup);\r\n        formGroup.markAsSubmitted = FormExtendedMethods.markAsSubmitted.bind(formGroup);\r\n        formGroup.isSubmitted = FormExtendedMethods.isSubmitted.bind(formGroup);\r\n        formGroup.addFormControlValidityTracker = FormExtendedMethods.addFormControlValidityTracker.bind(formGroup);\r\n        formGroup.onInit();\r\n        return formGroup;\r\n    }\r\n\r\n    control<T>(value: T, validator?: ValidatorFn | ValidatorFn[] | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null): NgTypeFormControl<T>;\r\n    control(formState: Object, validator?: ValidatorFn | ValidatorFn[] | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null) {\r\n        return this.ngFormBuilder.control(formState, validator, asyncValidator);\r\n    }\r\n\r\n    array<T>(controls: NgTypeAbstractControl<T>[], validator?: ValidatorFn | null, asyncValidator?: AsyncValidatorFn | null): NgTypeFormArray<T>;\r\n    array<S>(controlsConfig: any[], validator?: ValidatorFn | null, asyncValidator?: AsyncValidatorFn | null): NgTypeFormArray<S>;\r\n    array(controlsConfig: any[], validator?: ValidatorFn | null, asyncValidator?: AsyncValidatorFn | null) {\r\n        return this.ngFormBuilder.array(controlsConfig, validator, asyncValidator);\r\n    }\r\n}","\r\nimport { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { FormTypeBuilder } from \"./FormTypeBuilder.service\";\r\nimport { FormControlOnErrorItemDirective } from \"./directives/form-control-onerror.directive\";\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  declarations: [\r\n      FormControlOnErrorItemDirective\r\n  ],\r\n  exports: [\r\n      FormControlOnErrorItemDirective\r\n  ],\r\n   providers: [FormTypeBuilder],\r\n})\r\nexport class ReactiveFormsTyped { }\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}