import { Injectable } from "@angular/core";
import { FormBuilder as NgFormBuilder, } from "@angular/forms";
import { FormExtendedMethods } from "./FormTypeBuilder.extensions";
export class FormTypeBuilder {
    constructor() {
        this.ngFormBuilder = new NgFormBuilder();
    }
    static create() {
        return new FormTypeBuilder();
    }
    group(controlsConfig, options) {
        const formGroup = this.ngFormBuilder.group(controlsConfig, options);
        formGroup.onInit = FormExtendedMethods.onInit.bind(formGroup);
        formGroup.setFormErrors = FormExtendedMethods.setFormErrors.bind(formGroup);
        formGroup.setFormErrors = FormExtendedMethods.setFormErrors.bind(formGroup);
        formGroup.setFormControlErrors = FormExtendedMethods.setFormControlErrors.bind(formGroup);
        formGroup.markAsSubmitted = FormExtendedMethods.markAsSubmitted.bind(formGroup);
        formGroup.isSubmitted = FormExtendedMethods.isSubmitted.bind(formGroup);
        formGroup.addFormControlValidityTracker = FormExtendedMethods.addFormControlValidityTracker.bind(formGroup);
        formGroup.onInit();
        return formGroup;
    }
    control(formState, validator, asyncValidator) {
        return this.ngFormBuilder.control(formState, validator, asyncValidator);
    }
    array(controlsConfig, validator, asyncValidator) {
        return this.ngFormBuilder.array(controlsConfig, validator, asyncValidator);
    }
}
FormTypeBuilder.decorators = [
    { type: Injectable }
];
FormTypeBuilder.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9ybVR5cGVCdWlsZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvRm9ybVR5cGVCdWlsZGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQ0gsV0FBVyxJQUFJLGFBQWEsR0FJL0IsTUFBTSxnQkFBZ0IsQ0FBQztBQUV4QixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUluRSxNQUFNLE9BQU8sZUFBZTtJQU94QjtRQUNJLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxhQUFhLEVBQUUsQ0FBQztJQUM3QyxDQUFDO0lBTkQsTUFBTSxDQUFDLE1BQU07UUFDVCxPQUFPLElBQUksZUFBZSxFQUFFLENBQUM7SUFDakMsQ0FBQztJQU1ELEtBQUssQ0FBSSxjQUF3QyxFQUFFLE9BQXVDO1FBQ3RGLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQXVCLENBQUM7UUFDMUYsU0FBUyxDQUFDLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzlELFNBQVMsQ0FBQyxhQUFhLEdBQUcsbUJBQW1CLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM1RSxTQUFTLENBQUMsYUFBYSxHQUFHLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDNUUsU0FBUyxDQUFDLG9CQUFvQixHQUFHLG1CQUFtQixDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMxRixTQUFTLENBQUMsZUFBZSxHQUFHLG1CQUFtQixDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDaEYsU0FBUyxDQUFDLFdBQVcsR0FBRyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3hFLFNBQVMsQ0FBQyw2QkFBNkIsR0FBRyxtQkFBbUIsQ0FBQyw2QkFBNkIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDNUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ25CLE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUM7SUFHRCxPQUFPLENBQUMsU0FBaUIsRUFBRSxTQUE4QyxFQUFFLGNBQTZEO1FBQ3BJLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBSUQsS0FBSyxDQUFDLGNBQXFCLEVBQUUsU0FBOEIsRUFBRSxjQUF3QztRQUNqRyxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxTQUFTLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDL0UsQ0FBQzs7O1lBbENKLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHtcclxuICAgIEZvcm1CdWlsZGVyIGFzIE5nRm9ybUJ1aWxkZXIsXHJcbiAgICBWYWxpZGF0b3JGbixcclxuICAgIEFzeW5jVmFsaWRhdG9yRm4sXHJcbiAgICBBYnN0cmFjdENvbnRyb2xPcHRpb25zLFxyXG59IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xyXG5pbXBvcnQgeyBOZ1R5cGVBYnN0cmFjdENvbnRyb2wsIE5nVHlwZUZvcm1Db250cm9sLCBOZ1R5cGVGb3JtR3JvdXAsIE5nVHlwZUZvcm1BcnJheSB9IGZyb20gXCIuL0Zvcm1UeXBlQnVpbGRlci5tb2RlbHNcIjtcclxuaW1wb3J0IHsgRm9ybUV4dGVuZGVkTWV0aG9kcyB9IGZyb20gXCIuL0Zvcm1UeXBlQnVpbGRlci5leHRlbnNpb25zXCI7XHJcblxyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRm9ybVR5cGVCdWlsZGVyIHtcclxuXHJcbiAgICBwcml2YXRlIG5nRm9ybUJ1aWxkZXI6IE5nRm9ybUJ1aWxkZXI7XHJcbiAgICBzdGF0aWMgY3JlYXRlKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgRm9ybVR5cGVCdWlsZGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5uZ0Zvcm1CdWlsZGVyID0gbmV3IE5nRm9ybUJ1aWxkZXIoKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZ3JvdXA8VD4oY29udHJvbHNDb25maWc6IHsgW1AgaW4ga2V5b2YgVF0gOiBhbnkgfSwgb3B0aW9ucz86IEFic3RyYWN0Q29udHJvbE9wdGlvbnMgfCBudWxsKTogTmdUeXBlRm9ybUdyb3VwPFQ+IHtcclxuICAgICAgICBjb25zdCBmb3JtR3JvdXAgPSB0aGlzLm5nRm9ybUJ1aWxkZXIuZ3JvdXAoY29udHJvbHNDb25maWcsIG9wdGlvbnMpIGFzIE5nVHlwZUZvcm1Hcm91cDxUPjtcclxuICAgICAgICBmb3JtR3JvdXAub25Jbml0ID0gRm9ybUV4dGVuZGVkTWV0aG9kcy5vbkluaXQuYmluZChmb3JtR3JvdXApO1xyXG4gICAgICAgIGZvcm1Hcm91cC5zZXRGb3JtRXJyb3JzID0gRm9ybUV4dGVuZGVkTWV0aG9kcy5zZXRGb3JtRXJyb3JzLmJpbmQoZm9ybUdyb3VwKTtcclxuICAgICAgICBmb3JtR3JvdXAuc2V0Rm9ybUVycm9ycyA9IEZvcm1FeHRlbmRlZE1ldGhvZHMuc2V0Rm9ybUVycm9ycy5iaW5kKGZvcm1Hcm91cCk7XHJcbiAgICAgICAgZm9ybUdyb3VwLnNldEZvcm1Db250cm9sRXJyb3JzID0gRm9ybUV4dGVuZGVkTWV0aG9kcy5zZXRGb3JtQ29udHJvbEVycm9ycy5iaW5kKGZvcm1Hcm91cCk7XHJcbiAgICAgICAgZm9ybUdyb3VwLm1hcmtBc1N1Ym1pdHRlZCA9IEZvcm1FeHRlbmRlZE1ldGhvZHMubWFya0FzU3VibWl0dGVkLmJpbmQoZm9ybUdyb3VwKTtcclxuICAgICAgICBmb3JtR3JvdXAuaXNTdWJtaXR0ZWQgPSBGb3JtRXh0ZW5kZWRNZXRob2RzLmlzU3VibWl0dGVkLmJpbmQoZm9ybUdyb3VwKTtcclxuICAgICAgICBmb3JtR3JvdXAuYWRkRm9ybUNvbnRyb2xWYWxpZGl0eVRyYWNrZXIgPSBGb3JtRXh0ZW5kZWRNZXRob2RzLmFkZEZvcm1Db250cm9sVmFsaWRpdHlUcmFja2VyLmJpbmQoZm9ybUdyb3VwKTtcclxuICAgICAgICBmb3JtR3JvdXAub25Jbml0KCk7XHJcbiAgICAgICAgcmV0dXJuIGZvcm1Hcm91cDtcclxuICAgIH1cclxuXHJcbiAgICBjb250cm9sPFQ+KHZhbHVlOiBULCB2YWxpZGF0b3I/OiBWYWxpZGF0b3JGbiB8IFZhbGlkYXRvckZuW10gfCBudWxsLCBhc3luY1ZhbGlkYXRvcj86IEFzeW5jVmFsaWRhdG9yRm4gfCBBc3luY1ZhbGlkYXRvckZuW10gfCBudWxsKTogTmdUeXBlRm9ybUNvbnRyb2w8VD47XHJcbiAgICBjb250cm9sKGZvcm1TdGF0ZTogT2JqZWN0LCB2YWxpZGF0b3I/OiBWYWxpZGF0b3JGbiB8IFZhbGlkYXRvckZuW10gfCBudWxsLCBhc3luY1ZhbGlkYXRvcj86IEFzeW5jVmFsaWRhdG9yRm4gfCBBc3luY1ZhbGlkYXRvckZuW10gfCBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubmdGb3JtQnVpbGRlci5jb250cm9sKGZvcm1TdGF0ZSwgdmFsaWRhdG9yLCBhc3luY1ZhbGlkYXRvcik7XHJcbiAgICB9XHJcblxyXG4gICAgYXJyYXk8VD4oY29udHJvbHM6IE5nVHlwZUFic3RyYWN0Q29udHJvbDxUPltdLCB2YWxpZGF0b3I/OiBWYWxpZGF0b3JGbiB8IG51bGwsIGFzeW5jVmFsaWRhdG9yPzogQXN5bmNWYWxpZGF0b3JGbiB8IG51bGwpOiBOZ1R5cGVGb3JtQXJyYXk8VD47XHJcbiAgICBhcnJheTxTPihjb250cm9sc0NvbmZpZzogYW55W10sIHZhbGlkYXRvcj86IFZhbGlkYXRvckZuIHwgbnVsbCwgYXN5bmNWYWxpZGF0b3I/OiBBc3luY1ZhbGlkYXRvckZuIHwgbnVsbCk6IE5nVHlwZUZvcm1BcnJheTxTPjtcclxuICAgIGFycmF5KGNvbnRyb2xzQ29uZmlnOiBhbnlbXSwgdmFsaWRhdG9yPzogVmFsaWRhdG9yRm4gfCBudWxsLCBhc3luY1ZhbGlkYXRvcj86IEFzeW5jVmFsaWRhdG9yRm4gfCBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubmdGb3JtQnVpbGRlci5hcnJheShjb250cm9sc0NvbmZpZywgdmFsaWRhdG9yLCBhc3luY1ZhbGlkYXRvcik7XHJcbiAgICB9XHJcbn0iXX0=